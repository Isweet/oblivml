type value = secret int
type index = secret int

type bucket = value * index

type oram = (unit -> bucket) * (bucket array)

let init (size : public int) (default_value : unit -> value) : oram =
  let default_bucket (() : unit) = (default_value (), -1) in
  (default_bucket, array(n)[fun _ -> default_bucket ()])
in

let read_and_remove ((default_bucket, mem) : oram) (addr : secret int) : value =
  let len = length(mem) in
  let rec iterate (curr_idx : public int) (acc_bucket : bucket) : value =
    if curr_idx = len then
      let (ret, _) = acc_bucket in ret
    else
      let (cand, curr_addr) = mem[curr_idx] <- default_bucket () in
      let (left, right) = mux linear (addr = curr_addr, (cand, curr_addr), acc_bucket) in
      let _ = mem[curr_idx] <- right in
      iterate (curr_idx + 1) left
in

iterate 0 (default_bucket ())
