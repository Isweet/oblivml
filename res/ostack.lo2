(** Oblivious Stacks *)

(***********************
 ** Utility Functions **
 ***********************)

let rec div_2 (n : int<public, _|_>) : int<public, _|_> =
  if n = 0<public, _|_> then
    0<public, _|_>
  else
    div_2 (n - 2<public, _|_>) + 1<public, _|_>
in

let rec log_2 (n : int<public, _|_>) : int<public, _|_> =
  if n = 1<public, _|_> then
    0<public, _|_>
  else
    log_2 (div_2 n) + 1<public, _|_>
in

let rec pow_2 (n : int<public, _|_>) : int<public, _|_> =
  if n = 0<public, _|_> then
    1<public, _|_>
  else
    2<public, _|_> * (pow_2 (n + 1<public, _|_>))
in

(***********************
 ** Type Declarations **
 ***********************)

(** Data user is storing *)
type user_data = int<secret, 0>
in

(** Data the OStack is storing *)
type ostack_data =
  { is_some    : bool<secret, 0>
  ; ostack_tag : rint<secret, 0>
  ; ostack_val : user_data
  }
in

(** Data the NRORAM is storing *)
type nr_data =
  { is_some : bool<secret, 0>
  ; nr_tag  : int<secret, 0>
  ; nr_val  : ostack_data
  }
in

(** Blocks in the trivial ORAM *)
type block =
  { is_some : bool<secret, 0>
  ; idx     : int<secret, 0>
  ; data    : nr_data
  }
in

type trivial_oram = block array
in

type nr_oram = trivial_oram array
in

type ostack =
  { oram  : nr_oram
  ; idx_r : int<secret, 0> array
  ; tag_r : rint<secret, 0> array
  }
in

(********************
 ** Default Values **
 ********************)

let default_user_data =
  0<secret, 0>
in

let default_ostack_data =
  { is_some    = false<secret, 0>
  ; ostack_tag = rnd<secret, 0>
  ; ostack_val = default_user_data
  }
in

let default_nr_data =
  { is_some = false<secret, 0>
  ; nr_tag  = 0<secret, 0>
  ; nr_val  = default_ostack_data
  }
in

let default_block =
  { is_some = false<secret, 0>
  ; idx     = 0<secret, 0>
  ; data    = default_nr_data
  }
in

(******************
 ** Trivial ORAM **
 ******************)

let trivial_init (size : int<public, _|_>) : trivial_oram =
  array(size)[fun _ -> default_block]
in

let trivial_rr' (toram : trivial_oram) (idx : int<secret, 0>) : block =
  let len = length(toram) in
  let rec iterate (i : int<public, _|_>) (acc : block) : block =
    if i = len then
      acc
    else
      let curr = toram[i] <- default_block in
      let swap = not acc.is_some && idx = curr.idx in
      let (l, r) = mux(swap, curr, acc) in
      toram[i] <- r;
      iterate (i + 1<public, _|_>) l
  in
  iterate 0<public, _|_> default_block
in

let trivial_rr (toram : trivial_oram) (idx : int<secret, 0>) : nr_data =
  let result = trivial_rr' toram idx in
  result.data
in

let trivial_add' (toram : trivial_oram) (blk : block) : unit<public, _|_> =
  let len = length(toram) in
  let rec iterate (i : int<public, _|_>) (acc : block) : unit<public, _|_> =
    if i = len then
      ()<public, _|_>
    else
      let curr = toram[i] <- default_block in
      let swap = not curr.is_some in
      let (l, r) = mux(swap, curr, acc) in
      toram[i] <- r;
      iterate (i + 1<public, _|_>) l
  in
  iterate 0<public, _|_> blk
in

let trivial_add (toram : trivial_oram) (idx : int<secret, 0>) (data : nr_data) : unit<public, _|_> =
  trivial_add' toram { is_some = true<secret, 0>
                     ; idx     = idx
                     ; data    = data
                     }
in

let trivial_pop' (toram : trivial_oram) : block =
  let len = length(toram) in
  let rec iterate (i : int<public, _|_>) (acc : block) : block =
    if i = len
      acc
    else
      let curr = toram[i] <- default_block in
      let swap = not acc.is_some && curr.is_some in
      let (l, r) = mux(swap, curr, acc) in
      toram[i] <- r;
      iterate (i + 1<public, _|_) l
  in
  iterate 0<public, _|_> default_block
in

(************************
 ** NON-RECURSIVE ORAM **
 ************************)

(** ASSUMPTION:
      Size of the NR ORAM is exactly 2^k - 1, k >= 2.

      This ensures that the tree is full and has at least depth 2. *)

let nr_init (size : int<public, _|_>) (bucket_size : int<public, _|_>) : nr_oram =
  array(size)[fun _ -> trivial_init bucket_size]
in

let nr_rr' (nroram : nr_oram) (idx : int<secret, 0>) (tag : int<public, _|_>) : nr_data =
  let len = length(nroram) in
  let depth = log_2 (len + 1<public, _|_>) in
  let rec iterate (level : int<public, _|_>) (acc : nr_data) : nr_data =
    if level = depth then
      acc
    else
      let base = (pow_2 level) - 1<public, _|_> in
      let bucket_loc = base + (tag & base) in
      let bucket = nroram[bucket_loc] in
      let res = trivial_rr bucket idx in

      let pass = res.is_some in
      let (ret, _) = mux(pass, res, acc) in
      iterate (level + 1<public, _|_>) ret
  in
  iterate 0<public, _|_> default_nr_data
in

let nr_rr (nroram : nr_oram) (idx : int<secret, 0>) (tag : int<public, _|_>) : ostack_data =
  let ret = nr_rr' nroram idx tag in
  ret.nr_val
in

let nr_evict' (nroram : nr_oram) (level : int<public, _|_>) (loc : int<public, _|_>) : unit<public, _|_> =
  let mask = pow_2 level in

  let bucket = nroram[loc] in
  let popped = trivial_pop' bucket in

  let left = (popped.data.nr_pos & mask) = 0<secret, 0> in
  let (l,r) = mux(left, popped, default_block) in

  trivial_add' nroram[(2<public, _|_> * loc) + 1<public, _|_>] l;
  trivial_add' nroram[(2<public, _|_> * loc) + 2<public, _|_>] r
in

let nr_evict (nroram : nr_oram) : unit<public, _|_> =
  let len = length(nroram) in
  let depth = log_2 (len + 1<public, _|_>) in
  let rec iterate (level : int<public, _|_>) : unit<public, _|_> =
    if level = depth - 1<public, _|_> in
      ()
    else
      let mask = pow_2 level in
      let base = (pow_2 level) - 1<public, _|_> in

      (* Two evictions per-level *)
      let r1 = rnd<secret, 0> in
      let loc1 = base + (reveal(r1) & base) in
      nr_evict' nroram level loc1;

      let r2 = rnd<secret, 0> in
      let loc2 = base + (reveal(r2) & base) in
      nr_evict' nroram level loc2;

      iterate (level + 1<public, _|_>)
  in
  iterate 0<public, _|_>
in

let nr_add' (nroram : nr_oram) (blk : block) : unit<public, _|_> =
  let bucket = nroram[0 public] in
  trivial_add' bucket blk;
  nr_evict nroram
in

let nr_add (nroram : nr_oram) (idx : int<secret, 0>) (tag : int<secret, 0>) (data : ostack_data) : unit<public, _|_> =
  nr_add' nroram { is_some = true<secret, 0>
                 ; idx     = idx
                 ; data    = { is_some = true<secret, 0>
                             ; nr_tag  = tag
                             ; nr_val  = data
                             }
                 }
in

(*************
 ** OSTACKS **
 *************)

let ostack_init (size : int<public, _|_>) (bucket_size : int<public, _|_>) : ostack =
  { oram  = nr_init size bucket_size
  ; idx_r = array(1<public, _|_>)[fun _ -> 0<secret, 0>]
  ; tag_r = array(1<public, _|_>)[fun _ -> rnd<secret, 0>]
  }
in

let stackop (ostack : ostack) (ispush : bool<secret, _|_>) (data : user_data) : user_data =
  let idx = ostack.idx_r[0<public, _|_>] in
  let tag = ostack.tag_r[0<public, _|_>] <- rnd<secret, 0> in

  let (rr_idx, _) = mux(ispush, -1<secret, _|_>, idx) in
  let (rr_tag, add_tag) = mux(ispush, rnd<secret, 0>, tag) in
  let res = nr_rr ostack.oram rr_idx reveal(rr_tag) in

  let (idx', _) = mux(ispush, idx + 1<secret, _|_>, idx - 1<secret, _|_>) in
  let (tag', _) = mux(ispush, rnd<secret, 0>, res.ostack_tag) in

  let cand = { is_some = true<secret, 0>
             ; idx     = idx'
             ; data    = { is_some = true<secret, 0>
                         ; nr_tag  = use(tag')
                         ; nr_val  = { is_some    = true<secret, 0>
                                     ; ostack_tag = add_tag
                                     ; ostack_val = data
                                     }
                         }
             } in

  let (add, _) = mux(ispush, cand, default_block) in

  nr_add' ostack.oram add;

  ostack.idx_r[0<public, _|_>] <- idx';
  ostack.tag_r[0<public, _|_>] <- tag';

  res.ostack_val
in

()
